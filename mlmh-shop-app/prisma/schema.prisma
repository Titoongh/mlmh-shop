datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["strictUndefinedChecks", "omitApi"]
}

model Artist {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String         @unique
  firstName     String?
  lastName      String?
  genre         String?
  musicalGenres MusicalGenre[] @relation("ArtistMusicalGenre")
  picture       String
  tablatures    Tablature[]
  description   String?

  @@index([id])
  @@index([name])
}

model Tablature {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  downloadLink    String
  title           String
  publicationDate DateTime?
  musicalGenres   MusicalGenre[] @relation("TablatureMusicalGenre")
  contents        Content[]
  artists         Artist[]
  description     String?

  @@index([id])
  @@index([title])
}

// Each tablature can have multiple contents (audio, video, etc.)
model Content {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  type        ContentType
  url         String?
  blob        Bytes?
  tablature   Tablature   @relation(fields: [tablatureId], references: [id], onDelete: Cascade)
  tablatureId String
  rank        Int
}

model MusicalGenre {
  id         String      @id @default(uuid())
  name       String      @unique
  artists    Artist[]    @relation("ArtistMusicalGenre")
  tablatures Tablature[] @relation("TablatureMusicalGenre")
}

enum ContentType {
  AUDIO
  VIDEO
  IMAGE
}
